{"version":3,"sources":["./src/environments/environment.ts","./src/app/home-list/home-list.component.ts","./src/app/home-list/home-list.component.html","./src/app/food-service.service.ts","./src/app/app.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACbnE;AAAA;AAAA;AAAA;AAAA;AAA6D;;;;;ICAzD,qEAAgC;IAAA,uDAAa;IAAA,4DAAK;;;IAAlB,0DAAa;IAAb,6EAAa;;ADQ1C,MAAM,iBAAiB;IAG5B,YAAqB,WAA+B;QAA/B,gBAAW,GAAX,WAAW,CAAoB;IAAI,CAAC;IAEzD,QAAQ;QACN,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,CAAC,KAAa,EAAE,EAAE;YACjD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;gBAC5B,OAAO,IAAI,CAAC;YACd,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;;kFAXU,iBAAiB;iGAAjB,iBAAiB,8GAFjB,CAAC,wEAAkB,CAAC;QCRjC,oEAAG;QAAA,2EAAgB;QAAA,4DAAI;QACvB,qEAAI;QACA,2GAAkD;QACtD,4DAAK;;QADoB,0DAAS;QAAT,8EAAS;;;;;;;;;;;;;;;;;;;;ACK3B,MAAM,kBAAkB;IAG7B,YAAoB,IAAe;QAAf,SAAI,GAAJ,IAAI,CAAW;QAD3B,aAAQ,GAAG,iCAAiC,CAAC;IACd,CAAC;IACxC,QAAQ;QACN,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAE,QAAkB,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAChH,CAAC;IAEO,WAAW,CAAC,KAAU;QAC5B,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IACvB,CAAC;;oFAVU,kBAAkB;qGAAlB,kBAAkB,WAAlB,kBAAkB,mBAFjB,MAAM;;;;;;;;;;;;;ACJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AACF;AACY;;AAa7D,MAAM,SAAS;;kEAAT,SAAS;wFAAT,SAAS,cAFR,gFAAiB;6FADlB,EAAE,YAJJ;YACP,uEAAa;YACb,qEAAgB;SACjB;mIAIU,SAAS,mBATlB,gFAAiB,aAGjB,uEAAa;QACb,qEAAgB;;;;;;;;;;;;;;;;;;;ACX2B;AAGF;AACY;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,2EAAwB,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;;;;;;;;;;;;ACXpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,qC","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit } from '@angular/core';\nimport { Food } from '../food';\nimport { FoodServiceService } from '../food-service.service';\n\n@Component({\n  selector: 'app-home-list',\n  templateUrl: './home-list.component.html',\n  styleUrls: ['./home-list.component.css'],\n  providers: [FoodServiceService]\n})\nexport class HomeListComponent implements OnInit {\n  foods: Food[]\n\n  constructor( private foodService: FoodServiceService) { }\n\n  ngOnInit(): void {\n    this.foodService.getFoods().then((foods: Food[]) => {\n      this.foods = foods.map(food => {\n        return food;\n      });\n    });\n  }\n\n}\n","<p>home-list works!</p>\n<ul>\n    <li *ngFor=\"let food of foods;\">{{food.name}}</li>\n</ul>\n","import { Injectable } from '@angular/core';\nimport { Food } from './food';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FoodServiceService {\n\n  private foodsURL = 'http://localhost:3000/api/foods';\n  constructor(private http:HttpClient) { }\n  getFoods() : Promise<void | Food[]>{\n    return this.http.get(this.foodsURL).toPromise().then(response =>  response as Food[]).catch(this.handleError);\n  }\n\n  private handleError(error: any){\n    console.log(\"error\");\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http';\nimport { HomeListComponent } from './home-list/home-list.component';\n\n@NgModule({\n  declarations: [\n    HomeListComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [HomeListComponent]\n})\nexport class AppModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}